<?php

/**
 * @file
 * Webform conditional email to extend email configuration for webform.
 */

include_once 'webform_conditional_email.pages.inc';

/**
 * Get an array of conditional operators and functions.
 *
 * @return array
 *   Operators array.
 */
function _webform_conditional_email_conditional_operators() {
  $operators = array();

  $operators['='] = array(
    'label' => t('Is one of'),
    'comparator' => function ($input, $test) {
      return $input == $test;
    },
  );

  $operators['!='] = array(
    'label' => t('Is not one of'),
    'comparator' => function ($input, $test) {
      return $input != $test;
    },
  );
  $operators['<'] = array(
    'label' => t('Less than'),
    'comparator' => function ($input, $test) {
      return $input < $test;
    },
  );
  $operators['<='] = array(
    'label' => t('Less than, or equal to'),
    'comparator' => function ($input, $test) {
      return $input <= $test;
    },
  );
  $operators['>'] = array(
    'label' => t('Greater than'),
    'comparator' => function ($input, $test) {
      return $input > $test;
    },
  );

  $operators['>='] = array(
    'label' => t('Greater than, or equal to'),
    'comparator' => function ($input, $test) {
      return $input >= $test;
    },
  );

  $operators['LIKE'] = array(
    'label' => t('Contains'),
    'comparator' => function ($input, $test) {
      return strpos($input, $test) !== FALSE;
    },
  );

  return $operators;
}

/**
 * Load confirmation message for a particular condition_id and node.
 */
function webform_conditional_email_message_load($node, $condition_id = NULL) {
  // New message, so load defaults.
  if ($condition_id == 'add') {
    $defaults = new stdClass();
    $defaults->delta = '';
    $defaults->conditionals = array();
    $defaults->conditional_weight = 0;
    $defaults->config = array();

    return $defaults;
  }

  // Load existing messsages.
  $query = db_select('webform_conditional_email', 'wce')
    ->fields('wce')
    ->condition('nid', $node->nid);

  // If condition_id is set, just return settings for the specified message.
  if ($condition_id) {
    $defaults = $query->condition('condition_id', $condition_id)->execute()->fetchObject();
    if ($defaults->config) {
      $defaults->config = unserialize($defaults->config);
    }
    if ($defaults->conditionals) {
      $defaults->conditionals = unserialize($defaults->conditionals);
    }

    return $defaults;
  }

  $result = $query->orderBy('conditional_weight', 'ASC')
    ->orderBy('condition_id', 'ASC')
    ->execute();

  $records = array();
  while ($record = $result->fetchObject()) {
    $record->config = unserialize($record->config);
    $record->conditionals = unserialize($record->conditionals);
    $records[$record->condition_id] = $record;
  }

  return $records;
}

/**
 * Save confirmation message.
 */
function webform_conditional_email_message_save($rule) {
  $rule->config = serialize($rule->config);
  $rule->conditionals = serialize($rule->conditionals);
  $next_id_query = db_select('webform_conditional_email', 'rwce')
    ->fields('rwce', array('delta'))
    ->condition('nid', $rule->nid)
    ->condition('condition_id', $rule->condition_id);
  $rule->delta = $next_id_query->execute()->fetchField();
  if (!$rule->delta) {
    drupal_write_record('webform_conditional_email', $rule);
  }
  else {
    drupal_write_record('webform_conditional_email', $rule,
      array('nid', 'condition_id', 'delta'));
  }

  return $rule->condition_id;
}

/**
 * Delete confirmation message.
 */
function webform_conditional_email_message_delete($nid, $condition_id) {
  db_delete('webform_conditional_email')
    ->condition('nid', $nid)
    ->condition('condition_id', $condition_id)
    ->execute();
}

/**
 * Test a webform field value against a conditional.
 *
 * @param string $input_value
 *   Input value from match.
 * @param array $conditional
 *   Condition from match.
 *
 * @return bool
 *   On valid match return TRUE else FALSE.
 */
function _webform_conditional_email_test_match($input_value, array $conditional, $operators) {
  if (!isset($operators[$conditional['operator']])) {
    watchdog('webform_conditional_email', 'Operator for %op not found.', array('%op' => $conditional['operator']));
    return FALSE;
  }

  $comparator = $operators[$conditional['operator']]['comparator'];

  $matches = array_map('trim', explode("\n", $conditional['values']));
  foreach ($matches as $match) {
    if ($comparator($input_value, $match)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Add in our submit handler and reset 'redirect_url' to a safe value so it
 * doesn't interfere with our settings causing duplicate messages. Store the
 * original value in a custom place so we can fallback to it later if needed.
 */
function webform_conditional_email_form_webform_email_edit_form_alter(&$form, &$form_state) {
  form_load_include($form_state, 'inc', 'webform', 'includes/webform.components');
  $node = $form['#node'];
  $condition_id = $form['eid']['#value'];
  $form['#attached']['library'][] = array('webform', 'admin');
  $defaults = webform_conditional_email_message_load($node, $condition_id);
  if (!isset($form_state['conditionals'])) {
    $form_state['conditionals'] = 0;
    if ($defaults && !empty($defaults->conditionals)) {
      $form_state['conditionals'] = count($defaults->conditionals) - 1;
    }
  }
  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );

  // Generate list of conditional fields.
  $conditional_components = _webform_conditional_email_get_conditional_components($node);
  if (empty($conditional_components)) {
    drupal_set_message(t('No conditional components found.  You need to add some conditional components to your webform before you can configure conditional confirmation messages.'), 'error');
    return $form;
  }
  // Conditional rule.
  $form['conditionals'] = array(
    '#prefix' => '<div id="conditional-confirmation-conditionals">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',
    '#title' => t('Conditional rules'),
    '#collapsible' => FALSE,
    '#description' => t('Create a series of rules to control when this confirmation message is used.'),
  );

  // Grab the operators first, save generating this list for each conditional.
  $operators = _webform_conditional_email_conditional_operators_options();
  for ($i = 0; $i <= $form_state['conditionals']; $i++) {
    $form['conditionals'][] = _webform_conditional_email_conditional_fieldset($i, $node, $conditional_components, $operators, $defaults);
  }
  $form['conditionals']['add_new'] = array(
    '#type' => 'submit',
    '#value' => t('Add another'),
    '#submit' => array('_webform_conditional_email_edit_confirmation_form_add_conditional'),
    '#ajax' => array(
      'callback' => '_webform_conditional_email_edit_confirmation_form_add_conditional_callback',
      'wrapper' => 'conditional-confirmation-conditionals',
    ),
  );

  $form['#submit'][] = 'webform_conditional_email_edit_confirmation_form_submit';
}

/**
 * Implements hook_form_FORMID_alter().
 */
function webform_conditional_email_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'webform_client_form_') === 0 || $form_id == 'webform_client_form') {
    array_unshift($form['#submit'], 'webform_conditional_email_webform_client_form_submit');
  }
  elseif ($form_id == 'webform_email_delete_form') {
    $form['nid'] = array(
      '#type' => 'value',
      '#value' => $form['email']['#value']['nid'],
    );
    $form['condition_id'] = array(
      '#type' => 'value',
      '#value' => $form['email']['#value']['eid'],
    );
    $form['#submit'][] = 'webform_conditional_email_delete_confirmation_form_submit';
  }
}

/**
 * Submit handler; Load our conditional confirmation messages if required.
 */
function webform_conditional_email_webform_client_form_submit(&$form, &$form_state) {
  global $user;
  $submitted_data = $form_state['values']['submitted'];

  $node = $form['#node'];
  // Check if user is submitting as a draft.
  $is_draft = (int) !empty($form_state['save_draft']);

  // Check if this form is sending an email.
  if (!$is_draft) {
    $emails = $form['#node']->webform['emails'];
    $operators = _webform_conditional_email_conditional_operators();

    foreach ($emails as $condition_id => $email) {
      $rules = webform_conditional_email_message_load($node, $email['eid']);
      if (isset($rules->nid)) {
        $conditionals = $rules->conditionals;
        // Matches must match number of conditionals in order to pass.
        $matches = 0;

        foreach ($conditionals as $conditional) {
          $data = $submitted_data[$node->webform['components'][$conditional['component']]['form_key']];
          // Loop through each data in case field is multivalued.
          if (is_array($data)) {
            foreach ($data as $input_value) {
              if (_webform_conditional_email_test_match($input_value, $conditional, $operators)) {
                $matches++;
                break;
              }
            }
          }
          else {
            if (_webform_conditional_email_test_match($data, $conditional, $operators)) {
              $matches++;
              break;
            }
          }
        }
        // If we have a matched this message, update the settings and return.
        if ($matches != count($conditionals)) {
          unset($form['#node']->webform['emails'][$condition_id]);
        }
      }
    }
  }
}
